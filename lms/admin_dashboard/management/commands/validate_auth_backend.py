from django.core.management.base import BaseCommand
from django.conf import settings
from admin_dashboard.auth_backends import LibraryManagementAuditAuthBackend


class Command(BaseCommand):
    help = 'Validate the uniqueness and configuration of the custom authentication backend'
    
    def add_arguments(self, parser):
        parser.add_argument(
            '--verbose',
            action='store_true',
            help='Show detailed information about the backend configuration',
        )
    
    def handle(self, *args, **options):
        self.stdout.write(self.style.HTTP_INFO('=' * 60))
        self.stdout.write(self.style.HTTP_INFO('  AUTHENTICATION BACKEND VALIDATION'))
        self.stdout.write(self.style.HTTP_INFO('=' * 60))
        
        # Get backend info
        backend = LibraryManagementAuditAuthBackend()
        backend_info = backend.get_backend_info()
        
        self.stdout.write('\nüìã Backend Information:')
        self.stdout.write(f'  ‚Ä¢ ID: {backend_info["id"]}')
        self.stdout.write(f'  ‚Ä¢ Name: {backend_info["name"]}')
        self.stdout.write(f'  ‚Ä¢ Version: {backend_info["version"]}')
        self.stdout.write(f'  ‚Ä¢ Description: {backend_info["description"]}')
        
        if options['verbose']:
            self.stdout.write(f'  ‚Ä¢ Features: {", ".join(backend_info["features"])}')
        
        # Validate uniqueness
        validation = LibraryManagementAuditAuthBackend.validate_uniqueness()
        
        self.stdout.write('\nüîç Uniqueness Validation:')
        
        if validation['is_unique']:
            self.stdout.write(self.style.SUCCESS('  ‚úÖ Backend is uniquely configured'))
        else:
            self.stdout.write(self.style.ERROR('  ‚ùå Backend configuration conflicts detected'))
        
        # Show conflicts
        if validation['conflicts']:
            self.stdout.write('\n‚ö†Ô∏è  Conflicts:')
            for conflict in validation['conflicts']:
                self.stdout.write(self.style.ERROR(f'  ‚Ä¢ {conflict}'))
        
        # Show warnings
        if validation['warnings']:
            self.stdout.write('\nüî∂ Warnings:')
            for warning in validation['warnings']:
                self.stdout.write(self.style.WARNING(f'  ‚Ä¢ {warning}'))
        
        # Show current configuration
        self.stdout.write('\n‚öôÔ∏è  Current Authentication Backend Configuration:')
        auth_backends = getattr(settings, 'AUTHENTICATION_BACKENDS', [])
        for i, backend in enumerate(auth_backends, 1):
            status = 'üü¢' if i == 1 else 'üîµ'
            self.stdout.write(f'  {status} {i}. {backend}')
        
        if not validation['conflicts'] and not validation['warnings']:
            self.stdout.write(self.style.SUCCESS('\nüéâ All checks passed! Backend is properly configured.'))
        elif validation['conflicts']:
            self.stdout.write(self.style.ERROR('\n‚ùå Critical issues found. Please fix conflicts.'))
            return 1
        else:
            self.stdout.write(self.style.WARNING('\n‚ö†Ô∏è  Minor issues detected. Consider reviewing warnings.'))
        
        self.stdout.write('\n' + '=' * 60)
        return 0